#pragma once

#include "classwork/node.hpp"          // Node
#include "classwork/private/list.hpp"  // List

namespace classwork {

  /**
   * Структура данных "связный список".
   *
   * Хранит элементы в виде цепочки "узлов".
   * Характеризуется фактическим размером (size), указателем на первый (head) и последний (tail) узел.
   */
  struct LinkedList : List {
   private:
    // поля структуры
    int size_{0};          // кол-во узлов в списке
    Node* head_{nullptr};  // указатель на первый узел (начало списка)
    Node* tail_{nullptr};  // указатель на последний узел (конец списка)

   public:
    // константы структуры
    static constexpr int kNotFoundIndex = -1;  // индекс ненайденного элемента в списке

    /**
     * Создание пустого связного списка (генерируется автоматически).
     */
    LinkedList() = default;

    /**
     * Деструктор ~ O(n).
     *
     * Высвобождает выделенную под список память и устанавливает поля в нулевые значения.
     */
    ~LinkedList() override;

    /**
     * Добавление узла с указанным значением в конец списка ~ O(1).
     *
     * @param value - значение добавляемого узла
     */
    void Add(int value) override;

    /**
     * Вставка узла с указанным значением в список по определенному индексу ~ O(n).
     *
     * Вставка в начало или конец списка ~ O(1).
     * Все узлы, находящиеся на позиции вставки и справа от нее, сдвигаются вправо.
     *
     * @param index - позиция для вставки узла в список
     * @param value - значение вставляемого узла
     * @throws out_of_range при передаче индекса за пределами списка
     */
    void Insert(int index, int value) override;

    /**
     * Изменение значения узла списка по индексу ~ O(n).
     *
     * @param index - индекс изменяемого узла списка
     * @param new_value - новое значение узла списка
     * @throws out_of_range при передаче индекса за пределами списка
     */
    void Set(int index, int new_value) override;

    /**
     * Удаление узла списка по индексу ~ O(n).
     *
     * Удаление узла с начала списка ~ O(1).
     * Все узлы, стоящие справа от удаленного узла, сдвигаются влево.
     *
     * @param index - индекс удаляемого узла списка
     * @return значение удаленного узла списка
     * @throws out_of_range при передаче индекса за пределами списка
     */
    int Remove(int index) override;

    /**
     * Очистка списка ~ O(n).
     *
     * Высвобождение выделенной под узлы памяти и обнуление полей списка.
     */
    void Clear() override;

    /**
     * Получение значения узла по индексу ~ O(n).
     *
     * @param index - индекс узла списка
     * @return значение узла списка
     * @throws out_of_range при передаче индекса за пределами списка
     */
    int Get(int index) const override;

    /**
     * Поиск индекса первого вхождения узла с указанным значением ~ O(n).
     *
     * @param value - значение узла списка
     * @return индекс найденного узла или kNotFoundIndex - при его отсутствии
     */
    int IndexOf(int value) const override;

    /**
     * Проверка наличия узла в списке по значению ~ O(n).
     *
     * @param value - значение узла списка
     * @return true - при наличии узла в списке, false - при его отсутствии
     */
    bool Contains(int value) const override;

    /**
     * Проверка пустоты списка ~ O(1).
     *
     * Список считается пустым, если в нем нет узлов.
     *
     * @return true - если список пустой, false - в списке есть узлы
     */
    bool IsEmpty() const override;

    /**
     * Возвращает размер списка ~ O(1).
     *
     * @return количество узлов в списке
     */
    int size() const override;

    /**
     * Возвращает значение начального узла списка ~ O(1).
     * @return значение начального узла
     */
    int head() const;

    /**
     * Возвращает значение последнего узла списка ~ O(1).
     * @return значение последнего узла
     */
    int tail() const;

    /**
     * Поиск узла по индексу ~ O(n).
     *
     * Необходим для операций над списком, выполняемым по индексу.
     *
     * @param index - индекс узла
     * @return указатель на найденный узел или nullptr в случае индекса за пределами списка
     */
    Node* FindNode(int index) const;
  };

}  // namespace classwork